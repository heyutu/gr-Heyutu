# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Heyutu_swig', [dirname(__file__)])
        except ImportError:
            import _Heyutu_swig
            return _Heyutu_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_Heyutu_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Heyutu_swig = swig_import_helper()
    del swig_import_helper
else:
    import _Heyutu_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Heyutu_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _Heyutu_swig.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _Heyutu_swig.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _Heyutu_swig.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _Heyutu_swig.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _Heyutu_swig.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _Heyutu_swig.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _Heyutu_swig.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _Heyutu_swig.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _Heyutu_swig.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _Heyutu_swig.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _Heyutu_swig.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _Heyutu_swig.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _Heyutu_swig.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _Heyutu_swig.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _Heyutu_swig.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _Heyutu_swig.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _Heyutu_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class Heyutu_QPSK_Mapper_vbc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(Heyutu_QPSK_Mapper_vbc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Heyutu_QPSK_Mapper_vbc_sptr
        __init__(self,  p) -> Heyutu_QPSK_Mapper_vbc_sptr
        """
        this = _Heyutu_swig.new_Heyutu_QPSK_Mapper_vbc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr___deref__(self)

    __swig_destroy__ = _Heyutu_swig.delete_Heyutu_QPSK_Mapper_vbc_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_is_set_max_noutput_items(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_check_topology(self, *args, **kwargs)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_set_min_output_buffer(self, *args)

Heyutu_QPSK_Mapper_vbc_sptr_swigregister = _Heyutu_swig.Heyutu_QPSK_Mapper_vbc_sptr_swigregister
Heyutu_QPSK_Mapper_vbc_sptr_swigregister(Heyutu_QPSK_Mapper_vbc_sptr)

Heyutu_QPSK_Mapper_vbc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())

I_SQRT2 = _Heyutu_swig.I_SQRT2

def QPSK_Mapper_vbc(*args, **kwargs):
  """
    QPSK_Mapper_vbc(int symbol_length) -> Heyutu_QPSK_Mapper_vbc_sptr

    <+description+>

    Params: (symbol_length)
    """
  return _Heyutu_swig.QPSK_Mapper_vbc(*args, **kwargs)
class Heyutu_OFDM_Mapper_bcv_sptr(object):
    """Proxy of C++ boost::shared_ptr<(Heyutu_OFDM_Mapper_bcv)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Heyutu_OFDM_Mapper_bcv_sptr
        __init__(self,  p) -> Heyutu_OFDM_Mapper_bcv_sptr
        """
        this = _Heyutu_swig.new_Heyutu_OFDM_Mapper_bcv_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr___deref__(self)

    __swig_destroy__ = _Heyutu_swig.delete_Heyutu_OFDM_Mapper_bcv_sptr
    __del__ = lambda self : None;
    def msgq(self):
        """
        msgq(self) -> gr_msg_queue_sptr

        Params: (NONE)
        """
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_msgq(self)

    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_is_set_max_noutput_items(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_check_topology(self, *args, **kwargs)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_set_min_output_buffer(self, *args)

Heyutu_OFDM_Mapper_bcv_sptr_swigregister = _Heyutu_swig.Heyutu_OFDM_Mapper_bcv_sptr_swigregister
Heyutu_OFDM_Mapper_bcv_sptr_swigregister(Heyutu_OFDM_Mapper_bcv_sptr)

Heyutu_OFDM_Mapper_bcv_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def OFDM_Mapper_bcv(*args, **kwargs):
  """
    OFDM_Mapper_bcv(std::vector<(gr_complex,std::allocator<(gr_complex)>)> constellation, 
        unsigned int msgq_limit, unsigned int occupied_carriers, 
        unsigned int fft_length) -> Heyutu_OFDM_Mapper_bcv_sptr

    <+description+>

    Params: (constellation, msgq_limit, occupied_carriers, fft_length)
    """
  return _Heyutu_swig.OFDM_Mapper_bcv(*args, **kwargs)
class Heyutu_OFDM_cyclic_prefixer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(Heyutu_OFDM_cyclic_prefixer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Heyutu_OFDM_cyclic_prefixer_sptr
        __init__(self,  p) -> Heyutu_OFDM_cyclic_prefixer_sptr
        """
        this = _Heyutu_swig.new_Heyutu_OFDM_cyclic_prefixer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr___deref__(self)

    __swig_destroy__ = _Heyutu_swig.delete_Heyutu_OFDM_cyclic_prefixer_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_is_set_max_noutput_items(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_check_topology(self, *args, **kwargs)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_set_min_output_buffer(self, *args)

Heyutu_OFDM_cyclic_prefixer_sptr_swigregister = _Heyutu_swig.Heyutu_OFDM_cyclic_prefixer_sptr_swigregister
Heyutu_OFDM_cyclic_prefixer_sptr_swigregister(Heyutu_OFDM_cyclic_prefixer_sptr)

Heyutu_OFDM_cyclic_prefixer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def OFDM_cyclic_prefixer(*args, **kwargs):
  """
    OFDM_cyclic_prefixer(size_t input_size, size_t output_size) -> Heyutu_OFDM_cyclic_prefixer_sptr

    <+description+>

    Params: (input_size, output_size)
    """
  return _Heyutu_swig.OFDM_cyclic_prefixer(*args, **kwargs)
class Heyutu_null_adder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(Heyutu_null_adder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Heyutu_null_adder_sptr
        __init__(self,  p) -> Heyutu_null_adder_sptr
        """
        this = _Heyutu_swig.new_Heyutu_null_adder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _Heyutu_swig.Heyutu_null_adder_sptr___deref__(self)

    __swig_destroy__ = _Heyutu_swig.delete_Heyutu_null_adder_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _Heyutu_swig.Heyutu_null_adder_sptr_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_is_set_max_noutput_items(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_check_topology(self, *args, **kwargs)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _Heyutu_swig.Heyutu_null_adder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_null_adder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _Heyutu_swig.Heyutu_null_adder_sptr_set_min_output_buffer(self, *args)

Heyutu_null_adder_sptr_swigregister = _Heyutu_swig.Heyutu_null_adder_sptr_swigregister
Heyutu_null_adder_sptr_swigregister(Heyutu_null_adder_sptr)

Heyutu_null_adder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def null_adder(*args, **kwargs):
  """
    null_adder(size_t input_size, size_t output_size) -> Heyutu_null_adder_sptr

    <+description+>

    Params: (input_size, output_size)
    """
  return _Heyutu_swig.null_adder(*args, **kwargs)
class Heyutu_zero_adder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(Heyutu_zero_adder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Heyutu_zero_adder_sptr
        __init__(self,  p) -> Heyutu_zero_adder_sptr
        """
        this = _Heyutu_swig.new_Heyutu_zero_adder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr___deref__(self)

    __swig_destroy__ = _Heyutu_swig.delete_Heyutu_zero_adder_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _Heyutu_swig.Heyutu_zero_adder_sptr_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_is_set_max_noutput_items(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_check_topology(self, *args, **kwargs)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _Heyutu_swig.Heyutu_zero_adder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_zero_adder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _Heyutu_swig.Heyutu_zero_adder_sptr_set_min_output_buffer(self, *args)

Heyutu_zero_adder_sptr_swigregister = _Heyutu_swig.Heyutu_zero_adder_sptr_swigregister
Heyutu_zero_adder_sptr_swigregister(Heyutu_zero_adder_sptr)

Heyutu_zero_adder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def zero_adder(*args, **kwargs):
  """
    zero_adder(size_t input_size, size_t output_size) -> Heyutu_zero_adder_sptr

    <+description+>

    Params: (input_size, output_size)
    """
  return _Heyutu_swig.zero_adder(*args, **kwargs)
class Heyutu_svZeroAdder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(Heyutu_svZeroAdder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Heyutu_svZeroAdder_sptr
        __init__(self,  p) -> Heyutu_svZeroAdder_sptr
        """
        this = _Heyutu_swig.new_Heyutu_svZeroAdder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr___deref__(self)

    __swig_destroy__ = _Heyutu_swig.delete_Heyutu_svZeroAdder_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_is_set_max_noutput_items(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_check_topology(self, *args, **kwargs)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _Heyutu_swig.Heyutu_svZeroAdder_sptr_set_min_output_buffer(self, *args)

Heyutu_svZeroAdder_sptr_swigregister = _Heyutu_swig.Heyutu_svZeroAdder_sptr_swigregister
Heyutu_svZeroAdder_sptr_swigregister(Heyutu_svZeroAdder_sptr)

Heyutu_svZeroAdder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def svZeroAdder(*args, **kwargs):
  """
    svZeroAdder(size_t item_size, size_t nitems_per_block, size_t fft_length) -> Heyutu_svZeroAdder_sptr

    <+description+>

    Params: (item_size, nitems_per_block, fft_length)
    """
  return _Heyutu_swig.svZeroAdder(*args, **kwargs)
class Heyutu_OFDM_cyclic_deprefixer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(Heyutu_OFDM_cyclic_deprefixer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Heyutu_OFDM_cyclic_deprefixer_sptr
        __init__(self,  p) -> Heyutu_OFDM_cyclic_deprefixer_sptr
        """
        this = _Heyutu_swig.new_Heyutu_OFDM_cyclic_deprefixer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr___deref__(self)

    __swig_destroy__ = _Heyutu_swig.delete_Heyutu_OFDM_cyclic_deprefixer_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_is_set_max_noutput_items(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_check_topology(self, *args, **kwargs)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_set_min_output_buffer(self, *args)

Heyutu_OFDM_cyclic_deprefixer_sptr_swigregister = _Heyutu_swig.Heyutu_OFDM_cyclic_deprefixer_sptr_swigregister
Heyutu_OFDM_cyclic_deprefixer_sptr_swigregister(Heyutu_OFDM_cyclic_deprefixer_sptr)

Heyutu_OFDM_cyclic_deprefixer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def OFDM_cyclic_deprefixer(*args, **kwargs):
  """
    OFDM_cyclic_deprefixer(size_t input_size, size_t output_size) -> Heyutu_OFDM_cyclic_deprefixer_sptr

    <+description+>

    Params: (input_size, output_size)
    """
  return _Heyutu_swig.OFDM_cyclic_deprefixer(*args, **kwargs)
class Heyutu_svZeroAdder_inv_sptr(object):
    """Proxy of C++ boost::shared_ptr<(Heyutu_svZeroAdder_inv)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Heyutu_svZeroAdder_inv_sptr
        __init__(self,  p) -> Heyutu_svZeroAdder_inv_sptr
        """
        this = _Heyutu_swig.new_Heyutu_svZeroAdder_inv_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr___deref__(self)

    __swig_destroy__ = _Heyutu_swig.delete_Heyutu_svZeroAdder_inv_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_is_set_max_noutput_items(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_check_topology(self, *args, **kwargs)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_set_min_output_buffer(self, *args)

Heyutu_svZeroAdder_inv_sptr_swigregister = _Heyutu_swig.Heyutu_svZeroAdder_inv_sptr_swigregister
Heyutu_svZeroAdder_inv_sptr_swigregister(Heyutu_svZeroAdder_inv_sptr)

Heyutu_svZeroAdder_inv_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def svZeroAdder_inv(*args, **kwargs):
  """
    svZeroAdder_inv(size_t item_size, size_t nitems_per_block, size_t fft_length) -> Heyutu_svZeroAdder_inv_sptr

    <+description+>

    Params: (item_size, nitems_per_block, fft_length)
    """
  return _Heyutu_swig.svZeroAdder_inv(*args, **kwargs)
class Heyutu_OFDM_Sampler_sptr(object):
    """Proxy of C++ boost::shared_ptr<(Heyutu_OFDM_Sampler)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Heyutu_OFDM_Sampler_sptr
        __init__(self,  p) -> Heyutu_OFDM_Sampler_sptr
        """
        this = _Heyutu_swig.new_Heyutu_OFDM_Sampler_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr___deref__(self)

    __swig_destroy__ = _Heyutu_swig.delete_Heyutu_OFDM_Sampler_sptr
    __del__ = lambda self : None;
    def forecast(self, *args, **kwargs):
        """
        forecast(self, int noutput_items, gr_vector_int ninput_items_required)

        Params: (noutput_items, ninput_items_required)
        """
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_forecast(self, *args, **kwargs)

    def general_work(self, *args, **kwargs):
        """
        general_work(self, int noutput_items, gr_vector_int ninput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, ninput_items, input_items, output_items)
        """
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_general_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_is_set_max_noutput_items(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_check_topology(self, *args, **kwargs)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_set_min_output_buffer(self, *args)

Heyutu_OFDM_Sampler_sptr_swigregister = _Heyutu_swig.Heyutu_OFDM_Sampler_sptr_swigregister
Heyutu_OFDM_Sampler_sptr_swigregister(Heyutu_OFDM_Sampler_sptr)

Heyutu_OFDM_Sampler_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def OFDM_Sampler(*args, **kwargs):
  """
    OFDM_Sampler(unsigned int fft_length, unsigned int cp_length) -> Heyutu_OFDM_Sampler_sptr

    <+description+>

    Params: (fft_length, cp_length)
    """
  return _Heyutu_swig.OFDM_Sampler(*args, **kwargs)
class Heyutu_peak_detector_fb_sptr(object):
    """Proxy of C++ boost::shared_ptr<(Heyutu_peak_detector_fb)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Heyutu_peak_detector_fb_sptr
        __init__(self,  p) -> Heyutu_peak_detector_fb_sptr
        """
        this = _Heyutu_swig.new_Heyutu_peak_detector_fb_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr___deref__(self)

    __swig_destroy__ = _Heyutu_swig.delete_Heyutu_peak_detector_fb_sptr
    __del__ = lambda self : None;
    def set_threshold_factor_rise(self, *args, **kwargs):
        """
        set_threshold_factor_rise(self, float thr)

        Set the threshold factor value for the rise time.

        Params: (thr)
        """
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_set_threshold_factor_rise(self, *args, **kwargs)

    def set_threshold_factor_fall(self, *args, **kwargs):
        """
        set_threshold_factor_fall(self, float thr)

        Set the threshold factor value for the fall time.

        Params: (thr)
        """
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_set_threshold_factor_fall(self, *args, **kwargs)

    def set_look_ahead(self, *args, **kwargs):
        """
        set_look_ahead(self, int look)

        Set the look-ahead factor.

        Params: (look)
        """
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_set_look_ahead(self, *args, **kwargs)

    def set_alpha(self, *args, **kwargs):
        """
        set_alpha(self, int alpha)

        Set the running average alpha.

        Params: (alpha)
        """
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_set_alpha(self, *args, **kwargs)

    def threshold_factor_rise(self):
        """
        threshold_factor_rise(self) -> float

        Get the threshold factor value for the rise time.

        Params: (NONE)
        """
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_threshold_factor_rise(self)

    def threshold_factor_fall(self):
        """
        threshold_factor_fall(self) -> float

        Get the threshold factor value for the fall time.

        Params: (NONE)
        """
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_threshold_factor_fall(self)

    def look_ahead(self):
        """
        look_ahead(self) -> int

        Get the look-ahead factor value.

        Params: (NONE)
        """
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_look_ahead(self)

    def alpha(self):
        """
        alpha(self) -> float

        Get the alpha value of the running average.

        Params: (NONE)
        """
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_alpha(self)

    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_is_set_max_noutput_items(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_check_topology(self, *args, **kwargs)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _Heyutu_swig.Heyutu_peak_detector_fb_sptr_set_min_output_buffer(self, *args)

Heyutu_peak_detector_fb_sptr_swigregister = _Heyutu_swig.Heyutu_peak_detector_fb_sptr_swigregister
Heyutu_peak_detector_fb_sptr_swigregister(Heyutu_peak_detector_fb_sptr)

Heyutu_peak_detector_fb_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def peak_detector_fb(threshold_factor_rise = 0.25, threshold_factor_fall = 0.40, 
    look_ahead = 10, alpha = 0.001):
  """
    peak_detector_fb(float threshold_factor_rise = 0.25, float threshold_factor_fall = 0.40, 
        int look_ahead = 10, float alpha = 0.001) -> Heyutu_peak_detector_fb_sptr

    <+description+>

    Params: (threshold_factor_rise, threshold_factor_fall, look_ahead, alpha)
    """
  return _Heyutu_swig.peak_detector_fb(threshold_factor_rise, threshold_factor_fall, look_ahead, 
    alpha)
class Heyutu_symbol_finder_ff_sptr(object):
    """Proxy of C++ boost::shared_ptr<(Heyutu_symbol_finder_ff)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> Heyutu_symbol_finder_ff_sptr
        __init__(self,  p) -> Heyutu_symbol_finder_ff_sptr
        """
        this = _Heyutu_swig.new_Heyutu_symbol_finder_ff_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr___deref__(self)

    __swig_destroy__ = _Heyutu_swig.delete_Heyutu_symbol_finder_ff_sptr
    __del__ = lambda self : None;
    def work(self, *args, **kwargs):
        """
        work(self, int noutput_items, gr_vector_const_void_star input_items, 
            gr_vector_void_star output_items) -> int

        Params: (noutput_items, input_items, output_items)
        """
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_work(self, *args, **kwargs)

    def history(self):
        """history(self) -> unsigned int"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(self) -> int"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(self, int m)"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(self)"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(self) -> bool"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_is_set_max_noutput_items(self)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_check_topology(self, *args, **kwargs)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(self, long max_output_buffer)
        set_max_output_buffer(self, int port, long max_output_buffer)
        """
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(self, int i) -> long"""
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(self, long min_output_buffer)
        set_min_output_buffer(self, int port, long min_output_buffer)
        """
        return _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_set_min_output_buffer(self, *args)

Heyutu_symbol_finder_ff_sptr_swigregister = _Heyutu_swig.Heyutu_symbol_finder_ff_sptr_swigregister
Heyutu_symbol_finder_ff_sptr_swigregister(Heyutu_symbol_finder_ff_sptr)

Heyutu_symbol_finder_ff_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def symbol_finder_ff(*args, **kwargs):
  """
    symbol_finder_ff(size_t fft_length, size_t cp_length) -> Heyutu_symbol_finder_ff_sptr

    <+description+>

    Params: (fft_length, cp_length)
    """
  return _Heyutu_swig.symbol_finder_ff(*args, **kwargs)


